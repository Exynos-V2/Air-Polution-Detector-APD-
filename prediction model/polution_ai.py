# -*- coding: utf-8 -*-
"""polution_ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HKPhGjMy5oQAzFDqIibi5bck0Rl0XrFy
"""

# Import library untuk mengelola dan memanipulasi data (tabel)
import pandas as pd

# Import library dari Scikit-learn untuk membuat model AI
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

print("Semua library yang dibutuhkan berhasil di-import!")

# Nama file CSV yang telah diupload
import os
script_dir = os.path.dirname(os.path.abspath(__file__))
nama_file = os.path.join(script_dir, 'dataset_ai_1000.csv')

# Baca file CSV menjadi sebuah DataFrame menggunakan pandas
try:
    df = pd.read_csv(nama_file)
    print(f"Successfully loaded dataset from: {nama_file}")
except Exception as e:
    print(f"Error loading dataset: {e}")
    raise

# Tampilkan informasi dasar dan 5 baris pertama dari data
print(f"Dataset berhasil dimuat. Total baris data: {len(df)}")
print("\nInformasi dataset:")
print(df.info())
print("\n5 baris pertama dari data:")
print(df.head().to_string())

# Ubah tipe data kolom 'Timestamp' menjadi datetime
df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Buat kolom baru untuk 'Jam' (0-23)
df['Jam'] = df['Timestamp'].dt.hour

# Buat kolom baru untuk 'Hari' (Senin=0, ..., Minggu=6)
df['Hari'] = df['Timestamp'].dt.dayofweek

# Hapus kolom 'Timestamp' asli karena informasinya sudah kita ekstrak
df = df.drop('Timestamp', axis=1)

print("\nData setelah diubah (dengan kolom Jam dan Hari):")
print(df[['CO2 (ppm)', 'Jam', 'Hari']].head().to_string())

# Tentukan nama kolom target
target = 'CO2 (ppm)'

# Pisahkan fitur dan target
X = df.drop(target, axis=1)
y = df[target]

print("\nContoh Fitur (X) yang akan digunakan untuk prediksi:")
print(X.head().to_string())

# Bagi data secara acak: 80% untuk melatih, 20% untuk menguji
# random_state=42 memastikan pembagian data selalu sama setiap kali kode dijalankan
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Ukuran data latih (X_train): {X_train.shape}")
print(f"Ukuran data uji (X_test):  {X_test.shape}")

# Inisialisasi model
# n_estimators=100 berarti model akan menggabungkan 100 "pohon keputusan" untuk hasil yang lebih akurat dan stabil.
# n_jobs=-1 akan menggunakan semua core prosesor yang tersedia untuk mempercepat training.
model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)

# Latih model menggunakan data latih (X_train dan y_train)
print("Memulai proses training model dengan dataset besar...")
model.fit(X_train, y_train)
print("Model berhasil dilatih!")

# Lakukan prediksi pada data uji (X_test)
y_pred = model.predict(X_test)

# Hitung metrik evaluasi
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\n--- HASIL EVALUASI MODEL ---")
print(f"Mean Absolute Error (MAE): {mae:.2f} ppm")
print(f"Skor Akurasi R-squared (RÂ²): {r2:.2f}")

if r2 > 0.98:
    print("Performa model luar biasa! Siap untuk digunakan.")
elif r2 > 0.9:
    print("Performa model sangat baik.")
else:
    print("Performa model cukup, pertimbangkan untuk menambah data atau mencoba model lain.")

# Siapkan data baru dalam format yang benar.
# Pastikan urutan kolom sama persis dengan data latih!
# Contoh: Prediksi untuk hari Minggu (Hari=6), jam 2 siang (Jam=14)
data_baru = pd.DataFrame({
    'Alkohol (ppm)': [0.15],
    'CO (ppm)': [3.0],
    'NH4 (ppm)': [0.20],
    'Toluen (ppm)': [0.08],
    'Aseton (ppm)': [0.12],
    'Jam': [14],
    'Hari': [6]
})

# Lakukan prediksi menggunakan model yang sudah dilatih
prediksi_co2 = model.predict(data_baru)

print("\n--- PREDIKSI DENGAN DATA BARU ---")
print(f"Hasil prediksi tingkat CO2 adalah: {prediksi_co2[0]:.2f} ppm")

import joblib
import os

# Tentukan nama file untuk menyimpan model
model_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
nama_file_model = os.path.join(model_dir, 'random_forest_co2_model.joblib')

# Buat direktori jika belum ada
os.makedirs(os.path.dirname(nama_file_model), exist_ok=True)

# Simpan model ke file
joblib.dump(model, nama_file_model)

print(f"Model berhasil diekspor dan disimpan sebagai '{nama_file_model}'")

# Verifikasi bahwa file telah dibuat
if os.path.exists(nama_file_model):
    print("File model ditemukan.")
else:
    print("File model TIDAK ditemukan.")